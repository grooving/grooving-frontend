{"remainingRequest":"/home/practica/Desarrollo/Workspace/grooving-frontend/node_modules/thread-loader/dist/cjs.js!/home/practica/Desarrollo/Workspace/grooving-frontend/node_modules/babel-loader/lib/index.js!/home/practica/Desarrollo/Workspace/grooving-frontend/node_modules/eslint-loader/index.js??ref--13-0!/home/practica/Desarrollo/Workspace/grooving-frontend/src/security/GSecurity.js","dependencies":[{"path":"/home/practica/Desarrollo/Workspace/grooving-frontend/src/security/GSecurity.js","mtime":1553744786352},{"path":"/home/practica/Desarrollo/Workspace/grooving-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1553746048960},{"path":"/home/practica/Desarrollo/Workspace/grooving-frontend/node_modules/thread-loader/dist/cjs.js","mtime":1553746049876},{"path":"/home/practica/Desarrollo/Workspace/grooving-frontend/node_modules/babel-loader/lib/index.js","mtime":1553746048832},{"path":"/home/practica/Desarrollo/Workspace/grooving-frontend/node_modules/eslint-loader/index.js","mtime":1553746049148}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport _classCallCheck from \"/home/practica/Desarrollo/Workspace/grooving-frontend/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/practica/Desarrollo/Workspace/grooving-frontend/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nvar ROLES = ['ANONYMOUS', 'ARTIST', 'CUSTOMER'];\nvar CUSTOMER_ACCOUNT_CREDENTIALS = 'pug';\nvar ARTIST_ACCOUNT_CREDENTIALS = 'rosalia';\n\nvar GSecurity =\n/*#__PURE__*/\nfunction () {\n  function GSecurity() {\n    var username = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'anonymous';\n    var role = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'anonymous';\n    var token = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n    _classCallCheck(this, GSecurity);\n\n    this._username = username;\n\n    if (role != undefined && ROLES.includes(role.toUpperCase())) {\n      this._role = role;\n    }\n\n    this._token = token;\n  }\n\n  _createClass(GSecurity, [{\n    key: \"getRole\",\n    value: function getRole() {\n      return this._role;\n    }\n  }, {\n    key: \"authenticate\",\n    value: function authenticate(username, password) {\n      // Finish with API\n      if (username === password) {\n        if (username == CUSTOMER_ACCOUNT_CREDENTIALS) {\n          this._username = username;\n          this._token = 'ABC';\n          this._role = 'CUSTOMER';\n        } else if (username == ARTIST_ACCOUNT_CREDENTIALS) {\n          this._username = username;\n          this._token = 'ABC';\n          this._role = 'ARTIST';\n        } else {\n          return false;\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"deauthenticate\",\n    value: function deauthenticate() {\n      this._username = 'anonymous';\n      this._role = 'ANONYMOUS';\n      this._token = '';\n    }\n  }, {\n    key: \"isAuthenticated\",\n    value: function isAuthenticated() {\n      return this._token != undefined && this._token.length > 0;\n    }\n  }, {\n    key: \"isAnonymous\",\n    value: function isAnonymous() {\n      return this._token != undefined && this._token.length == 0;\n    }\n  }, {\n    key: \"hasRole\",\n    value: function hasRole(role) {\n      if (role != undefined && ROLES.includes(role.toUpperCase())) {\n        return this._role.toUpperCase() === role.toUpperCase();\n      } else return false;\n    }\n  }, {\n    key: \"setRole\",\n    value: function setRole(role) {\n      if (role != undefined && ROLES.includes(role.toUpperCase())) {\n        this._role = role;\n        return true;\n      } else return false;\n    }\n  }]);\n\n  return GSecurity;\n}();\n\nvar instance = new GSecurity();\nconsole.log('hola');\nexport default instance;",{"version":3,"sources":["/home/practica/Desarrollo/Workspace/grooving-frontend/src/security/GSecurity.js"],"names":["ROLES","CUSTOMER_ACCOUNT_CREDENTIALS","ARTIST_ACCOUNT_CREDENTIALS","GSecurity","username","role","token","_username","undefined","includes","toUpperCase","_role","_token","password","length","instance","console","log"],"mappings":";;;AAAA,IAAMA,KAAK,GAAG,CAAC,WAAD,EAAc,QAAd,EAAwB,UAAxB,CAAd;AACA,IAAMC,4BAA4B,GAAG,KAArC;AACA,IAAMC,0BAA0B,GAAG,SAAnC;;IAEMC,S;;;AAEF,uBAAmE;AAAA,QAAvDC,QAAuD,uEAA5C,WAA4C;AAAA,QAA/BC,IAA+B,uEAAxB,WAAwB;AAAA,QAAXC,KAAW,uEAAH,EAAG;;AAAA;;AAEjE,SAAKC,SAAL,GAAiBH,QAAjB;;AAEA,QAAIC,IAAI,IAAIG,SAAR,IAAqBR,KAAK,CAACS,QAAN,CAAeJ,IAAI,CAACK,WAAL,EAAf,CAAzB,EAA4D;AAC1D,WAAKC,KAAL,GAAaN,IAAb;AACD;;AAED,SAAKO,MAAL,GAAcN,KAAd;AAED;;;;8BAEQ;AACL,aAAO,KAAKK,KAAZ;AACH;;;iCAEYP,Q,EAAUS,Q,EAAS;AAC9B;AACA,UAAGT,QAAQ,KAAKS,QAAhB,EAAyB;AACrB,YAAGT,QAAQ,IAAIH,4BAAf,EAA4C;AACxC,eAAKM,SAAL,GAAiBH,QAAjB;AACA,eAAKQ,MAAL,GAAc,KAAd;AACA,eAAKD,KAAL,GAAa,UAAb;AACH,SAJD,MAIM,IAAIP,QAAQ,IAAIF,0BAAhB,EAA2C;AAC7C,eAAKK,SAAL,GAAiBH,QAAjB;AACA,eAAKQ,MAAL,GAAc,KAAd;AACA,eAAKD,KAAL,GAAa,QAAb;AACH,SAJK,MAID;AACD,iBAAO,KAAP;AACH;;AAED,eAAO,IAAP;AACH;;AAED,aAAO,KAAP;AACD;;;qCAEe;AACZ,WAAKJ,SAAL,GAAiB,WAAjB;AACA,WAAKI,KAAL,GAAa,WAAb;AACA,WAAKC,MAAL,GAAc,EAAd;AACH;;;sCAEgB;AACb,aAAO,KAAKA,MAAL,IAAeJ,SAAf,IAA4B,KAAKI,MAAL,CAAYE,MAAZ,GAAqB,CAAxD;AACH;;;kCAEY;AACT,aAAO,KAAKF,MAAL,IAAeJ,SAAf,IAA4B,KAAKI,MAAL,CAAYE,MAAZ,IAAsB,CAAzD;AACH;;;4BAEOT,I,EAAK;AAET,UAAGA,IAAI,IAAIG,SAAR,IAAqBR,KAAK,CAACS,QAAN,CAAeJ,IAAI,CAACK,WAAL,EAAf,CAAxB,EAA2D;AACvD,eAAO,KAAKC,KAAL,CAAWD,WAAX,OAA6BL,IAAI,CAACK,WAAL,EAApC;AACH,OAFD,MAII,OAAO,KAAP;AACP;;;4BAEOL,I,EAAK;AAET,UAAGA,IAAI,IAAIG,SAAR,IAAqBR,KAAK,CAACS,QAAN,CAAeJ,IAAI,CAACK,WAAL,EAAf,CAAxB,EAA2D;AACvD,aAAKC,KAAL,GAAaN,IAAb;AACA,eAAO,IAAP;AACH,OAHD,MAKI,OAAO,KAAP;AACP;;;;;;AAIH,IAAMU,QAAQ,GAAG,IAAIZ,SAAJ,EAAjB;AAEAa,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,eAAeF,QAAf","sourcesContent":["const ROLES = ['ANONYMOUS', 'ARTIST', 'CUSTOMER'];\nconst CUSTOMER_ACCOUNT_CREDENTIALS = 'pug';\nconst ARTIST_ACCOUNT_CREDENTIALS = 'rosalia';\n\nclass GSecurity {\n\n    constructor(username = 'anonymous', role = 'anonymous', token = ''){\n      \n      this._username = username;\n      \n      if (role != undefined && ROLES.includes(role.toUpperCase())){\n        this._role = role;\n      }\n\n      this._token = token;\n\n    }\n\n    getRole(){\n        return this._role;\n    }\n  \n    authenticate(username, password){\n      // Finish with API\n      if(username === password){\n          if(username == CUSTOMER_ACCOUNT_CREDENTIALS){\n              this._username = username;\n              this._token = 'ABC';\n              this._role = 'CUSTOMER';\n          }else if (username == ARTIST_ACCOUNT_CREDENTIALS){\n              this._username = username;\n              this._token = 'ABC';\n              this._role = 'ARTIST';\n          }else{\n              return false\n          }\n\n          return true;\n      }\n\n      return false;\n    }\n\n    deauthenticate(){\n        this._username = 'anonymous';\n        this._role = 'ANONYMOUS';\n        this._token = '';\n    }\n\n    isAuthenticated(){\n        return this._token != undefined && this._token.length > 0;\n    }\n\n    isAnonymous(){\n        return this._token != undefined && this._token.length == 0;\n    }\n    \n    hasRole(role){\n\n        if(role != undefined && ROLES.includes(role.toUpperCase())){\n            return this._role.toUpperCase() === role.toUpperCase();\n        }\n        else\n            return false;\n    }\n\n    setRole(role){\n\n        if(role != undefined && ROLES.includes(role.toUpperCase())){\n            this._role = role;\n            return true;\n        }\n        else\n            return false;\n    }\n\n  }\n  \n  const instance = new GSecurity();\n\n  console.log('hola');\n  export default instance;"]}]}